{"version":3,"sources":["../../test/core_spec.js"],"names":["describe","it","state","entries","nextState","to","equal","of","votingState","voteCast","next"],"mappings":";;AAGA;;AACA;;AAEA;;AAEAA,SAAS,WAAT,EAAqB,YAAI;AACrBA,aAAS,aAAT,EAAwB,YAAI;AACxBC,WAAG,2CAAH,EAA+C,YAAI;AAC/C,gBAAMC,QAAQ,qBAAd;AACA,gBAAMC,UAAU,CAAC,qBAAD,EAAuB,aAAvB,CAAhB;AACA,gBAAMC,YAAY,sBAAWF,KAAX,EAAiBC,OAAjB,CAAlB;AACA,8BAAOC,SAAP,EAAkBC,EAAlB,CAAqBC,KAArB,CAA2B,oBAAI;AAC3BH,yBAAQ,gBAAKI,EAAL,CAAQ,qBAAR,EAA8B,aAA9B;AADmB,aAAJ,CAA3B;AAGH,SAPD;AAQH,KATD;;AAWAP,aAAS,YAAT,EAAsB,YAAI;AACvBC,WAAG,yDAAH,EAA6D,YAAI;AAC9D,gBAAMC,QAAQ,oBAAI;AACd,2BAAU,gBAAKK,EAAL,CAAQ,UAAR,EAAmB,iBAAnB,EAAqC,qBAArC;AADI,aAAJ,CAAd;AAGA,gBAAMC,cAAc,gBAAKN,KAAL,CAApB;AACA,8BAAOM,WAAP,EAAoBH,EAApB,CAAuBC,KAAvB,CAA6B,oBAAI;AAC7B,2BAAU,gBAAKC,EAAL,CAAQ,qBAAR,CADmB;AAE7B,wBAAO,oBAAI,EAAC,QAAO,gBAAKA,EAAL,CAAQ,UAAR,EAAmB,iBAAnB,CAAR,EAAJ;AAFsB,aAAJ,CAA7B;AAIF,SATD;;AAWAN,WAAG,0CAAH,EAA8C,YAAI,CAEjD,CAFD;AAGF,KAfD;;AAiBAD,aAAS,mCAAT,EAA6C,YAAI;AAC7CC,WAAG,wCAAH,EAA4C,YAAI;AAC5C,gBAAMC,QAAQ,oBAAI;AACd,wBAAO,oBAAI,EAAC,QAAO,gBAAKK,EAAL,CAAQ,WAAR,EAAoB,wBAApB,CAAR,EAAJ,CADO;AAEd,2BAAU;AAFI,aAAJ,CAAd;AAIA,gBAAME,WAAW,gBAAKP,KAAL,EAAW,wBAAX,CAAjB;AACA,8BAAOO,QAAP,EAAiBJ,EAAjB,CAAoBC,KAApB,CAA0B,oBAAI;AAC1B,wBAAO,oBAAI;AACP,4BAAO,gBAAKC,EAAL,CAAQ,WAAR,EAAoB,wBAApB,CADA;AAEP,6BAAQ,oBAAI;AACR,kDAAyB;AADjB,qBAAJ;AAFD,iBAAJ,CADmB;AAO1B,2BAAU;AAPgB,aAAJ,CAA1B;AASH,SAfD;;AAiBAN,WAAG,aAAH,EAAiB,YAAI;AACjB,gBAAMC,QAAQ,oBAAI;AACd,wBAAO,oBAAI;AACP,4BAAO,gBAAKK,EAAL,CAAQ,UAAR,EAAmB,OAAnB,CADA;AAEP,6BAAQ,oBAAI;AACR,oCAAW,CADH;AAER,iCAAQ;AAFA,qBAAJ;AAFD,iBAAJ;AADO,aAAJ,CAAd;;AAUA,gBAAMG,OAAO,gBAAKR,KAAL,EAAW,OAAX,CAAb;AACA,8BAAOQ,IAAP,EAAaL,EAAb,CAAgBC,KAAhB,CAAsB,oBAAI;AAC1B,wBAAO,oBAAI;AACP,4BAAO,gBAAKC,EAAL,CAAQ,UAAR,EAAmB,OAAnB,CADA;AAEP,6BAAQ,oBAAI;AACR,oCAAW,CADH;AAER,iCAAQ;AAFA,qBAAJ;AAFD,iBAAJ;AADmB,aAAJ,CAAtB;AAUH,SAtBD;AAuBH,KAzCD;AA2CH,CAxED,E,CARA","file":"core_spec.js","sourcesContent":["/**\r\n * Created by Owner on 1/6/2017.\r\n */\r\nimport {expect} from 'chai';\r\nimport {List,Map} from 'immutable';\r\n\r\nimport {setEntries,next,vote} from '../src/core';\r\n\r\ndescribe(\"app logic\",()=>{\r\n    describe(\"set entries\", ()=>{\r\n        it(\"adds a new entry to the most recent state\",()=>{\r\n            const state = Map();\r\n            const entries = [\"Requiem for a Dream\",\"Gangs of NY\"];\r\n            const nextState = setEntries(state,entries);\r\n            expect(nextState).to.equal(Map({\r\n                entries:List.of(\"Requiem for a Dream\",\"Gangs of NY\")\r\n            }));\r\n        });\r\n    });\r\n\r\n    describe(\"next state\",()=>{\r\n       it(\"produces the next state with a voting pair from entries\",()=>{\r\n          const state = Map({\r\n              \"entries\":List.of(\"Sunshine\",\"The Dark Knight\",\"There Will Be Blood\")\r\n          });\r\n          const votingState = next(state);\r\n          expect(votingState).to.equal(Map({\r\n              \"entries\":List.of(\"There Will Be Blood\"),\r\n              \"vote\":Map({\"pair\":List.of(\"Sunshine\",\"The Dark Knight\")}),\r\n          }))\r\n       });\r\n\r\n       it(\"it adds winner of vote back into entries\",()=>{\r\n           \r\n       });\r\n    });\r\n\r\n    describe(\"tally votes for a pair of entries\",()=>{\r\n        it(\"creates the first vote for a vote pair\",()=>{\r\n            const state = Map({\r\n                \"vote\":Map({\"pair\":List.of(\"King Kong\",\"No Country for Old Men\")}),\r\n                \"entries\":List()\r\n            });\r\n            const voteCast = vote(state,\"No Country for Old Men\");\r\n            expect(voteCast).to.equal(Map({\r\n                \"vote\":Map({\r\n                    \"pair\":List.of(\"King Kong\",\"No Country for Old Men\"),\r\n                    \"tally\":Map({\r\n                        \"No Country for Old Men\":1\r\n                    })\r\n                }),\r\n                \"entries\":List()\r\n            }));\r\n        });\r\n\r\n        it(\"adds a vote\",()=>{\r\n            const state = Map({\r\n                \"vote\":Map({\r\n                    \"pair\":List.of(\"The Wire\",\"Fargo\"),\r\n                    \"tally\":Map({\r\n                        \"The Wire\":4,\r\n                        \"Fargo\":2\r\n                    })\r\n                })\r\n            });\r\n\r\n            const next = vote(state,\"Fargo\");\r\n            expect(next).to.equal(Map({\r\n            \"vote\":Map({\r\n                \"pair\":List.of(\"The Wire\",\"Fargo\"),\r\n                \"tally\":Map({\r\n                    \"The Wire\":4,\r\n                    \"Fargo\":3\r\n                })\r\n            })\r\n        }));\r\n\r\n        });\r\n    });\r\n\r\n});\r\n\r\n"]}