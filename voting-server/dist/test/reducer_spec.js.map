{"version":3,"sources":["../../test/reducer_spec.js"],"names":["describe","it","state","action_setEntries","type","entries","handled","to","equal","of","action_Next","vote","pair","tallies","action_Vote"],"mappings":";;AAGA;;;;AACA;;AACA;;;;AAEAA,SAAS,SAAT,EAAmB,YAAI;AACpBC,OAAG,gCAAH,EAAoC,YAAI;AACnC,YAAMC,QAAQ,qBAAd;AACA,YAAMC,oBAAoB,EAACC,MAAK,aAAN,EAAoBC,SAAQ,CAAC,WAAD,EAAa,eAAb,CAA5B,EAA1B;AACA,YAAMC,UAAU,uBAAQJ,KAAR,EAAcC,iBAAd,CAAhB;;AAEA,0BAAOG,OAAP,EAAgBC,EAAhB,CAAmBC,KAAnB,CAAyB,oBAAI;AACzBH,qBAAQ,gBAAKI,EAAL,CAAQ,WAAR,EAAoB,eAApB;AADiB,SAAJ,CAAzB;AAGJ,KARD;;AAUAR,OAAG,uBAAH,EAA2B,YAAI;AAC1B,YAAMC,QAAQ,oBAAI;AACdG,qBAAQ,gBAAKI,EAAL,CAAQ,WAAR,EAAoB,eAApB,EAAoC,kBAApC;AADM,SAAJ,CAAd;AAGA,YAAMC,cAAc,EAACN,MAAK,MAAN,EAApB;AACA,YAAME,UAAU,uBAAQJ,KAAR,EAAcQ,WAAd,CAAhB;;AAEA,0BAAOJ,OAAP,EAAgBC,EAAhB,CAAmBC,KAAnB,CAAyB,oBAAI;AACzBH,qBAAQ,gBAAKI,EAAL,CAAQ,kBAAR,CADiB;AAEzBE,kBAAK,oBAAI;AACLC,sBAAK,gBAAKH,EAAL,CAAQ,WAAR,EAAoB,eAApB;AADA,aAAJ;AAFoB,SAAJ,CAAzB;AAOJ,KAdD;;AAgBAR,OAAG,kBAAH,EAAsB,YAAI;AACrB,YAAMC,QAAQ,oBAAI;AACdG,qBAAQ,gBAAKI,EAAL,CAAQ,cAAR,EAAuB,QAAvB,CADM;AAEdE,kBAAK,oBAAI;AACLC,sBAAK,gBAAKH,EAAL,CAAQ,mBAAR,EAA4B,UAA5B,CADA;AAELI,yBAAQ,oBAAI;AACR,yCAAoB,CADZ;AAER,gCAAW;AAFH,iBAAJ;AAFH,aAAJ;AAFS,SAAJ,CAAd;;AAWA,YAAMC,cAAc,EAACV,MAAK,MAAN,EAAaO,MAAK,mBAAlB,EAApB;AACA,YAAML,UAAU,uBAAQJ,KAAR,EAAcY,WAAd,CAAhB;AACA,0BAAOR,OAAP,EAAgBC,EAAhB,CAAmBC,KAAnB,CAAyB,oBAAI;AACzBH,qBAAQ,gBAAKI,EAAL,CAAQ,cAAR,EAAuB,QAAvB,CADiB;AAEzBE,kBAAK,oBAAI;AACLC,sBAAK,gBAAKH,EAAL,CAAQ,mBAAR,EAA4B,UAA5B,CADA;AAELI,yBAAQ,oBAAI;AACR,yCAAoB,CADZ;AAER,gCAAW;AAFH,iBAAJ;AAFH,aAAJ;AAFoB,SAAJ,CAAzB;AAWJ,KAzBD;AA6BF,CAxDD,E,CAPA","file":"reducer_spec.js","sourcesContent":["/**\r\n * Created by Owner on 1/9/2017.\r\n */\r\nimport reducer from \"../src/reducer\";\r\nimport {Map,List} from \"immutable\";\r\nimport {expect} from \"chai\";\r\n\r\ndescribe(\"reducer\",()=>{\r\n   it(\"handles the SET_ENTRIES action\",()=>{\r\n        const state = Map();\r\n        const action_setEntries = {type:\"SET_ENTRIES\",entries:[\"Spiderman\",\"Batman Begins\"]};\r\n        const handled = reducer(state,action_setEntries);\r\n\r\n        expect(handled).to.equal(Map({\r\n            entries:List.of(\"Spiderman\",\"Batman Begins\")\r\n        }));\r\n   });\r\n\r\n   it(\"handles the next vote\",()=>{\r\n        const state = Map({\r\n            entries:List.of(\"Spiderman\",\"Batman Begins\",\"The Big Lebowski\")\r\n        });\r\n        const action_Next = {type:\"NEXT\"};\r\n        const handled = reducer(state,action_Next);\r\n\r\n        expect(handled).to.equal(Map({\r\n            entries:List.of(\"The Big Lebowski\"),\r\n            vote:Map({\r\n                pair:List.of(\"Spiderman\",\"Batman Begins\")\r\n            })\r\n        }));\r\n\r\n   });\r\n\r\n   it(\"registers a vote\",()=>{\r\n        const state = Map({\r\n            entries:List.of(\"Training Day\",\"Fences\"),\r\n            vote:Map({\r\n                pair:List.of(\"American Gangster\",\"Airplane\"),\r\n                tallies:Map({\r\n                    \"American Gangster\":7,\r\n                    \"Airplane\":5\r\n                })\r\n            })\r\n        });\r\n\r\n        const action_Vote = {type:\"VOTE\",vote:\"American Gangster\"};\r\n        const handled = reducer(state,action_Vote);\r\n        expect(handled).to.equal(Map({\r\n            entries:List.of(\"Training Day\",\"Fences\"),\r\n            vote:Map({\r\n                pair:List.of(\"American Gangster\",\"Airplane\"),\r\n                tallies:Map({\r\n                    \"American Gangster\":8,\r\n                    \"Airplane\":5\r\n                })\r\n            })\r\n        }));\r\n\r\n   });\r\n\r\n\r\n\r\n});"]}